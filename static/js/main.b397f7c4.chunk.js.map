{"version":3,"sources":["Components/MainComponent.jsx","Components/Questions.jsx","App.js","reportWebVitals.js","index.js"],"names":["MainComponent","props","useState","length","setLength","difficulty","setDifficulty","type","setType","category","setCategory","history","useHistory","useEffect","className","onSubmit","e","preventDefault","categoryid","document","getElementById","categoryTxt","options","selectedIndex","text","categoryText","onClick","push","onInput","output","input","value","Math","floor","onChange","typeBox","disabled","htmlFor","id","name","min","max","step","Questions","data","score","setScore","questions","setQuestions","answers","setAnswers","correctAnswers","setCorrectAnswers","finished","setFinished","counter","setCount","previousData","useRef","current","back","allAnswers","quizData","question","correct_answer","incorrect_answers","map","item","array","randomIndex","currentIndex","random","shuffle","checkLimit","checkAnswer","target","App","setData","setCategoryText","exact","path","fetch","then","res","json","fetchedData","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b397f7c4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport \"../style/MainComponent.css\";\r\n\r\nexport default function MainComponent(props) {\r\n  const [length, setLength] = useState(20);\r\n  const [difficulty, setDifficulty] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  //check input range\r\n  const inputValue = () => {\r\n    let output = document.getElementById(\"output\");\r\n    let input = document.getElementById(\"length\");\r\n    output.value = Math.floor(input.value);\r\n    setLength(output.value);\r\n  };\r\n\r\n  //if parent component's data isnt updated, update it!\r\n  useEffect(() => {\r\n    if (\r\n      length !== props.length ||\r\n      difficulty !== props.difficulty ||\r\n      type !== props.type ||\r\n      category !== props.category\r\n    ) {\r\n      props.length(length);\r\n      props.category(category);\r\n      props.type(type);\r\n      props.difficulty(difficulty);\r\n    }\r\n  });\r\n\r\n  //check select values\r\n  const checkSelects = () => {\r\n    let category = document.getElementById(\"category\").value;\r\n    let difficulty = document.getElementById(\"difficulty\").value;\r\n    let type = document.getElementById(\"type\").value;\r\n    let typeBox = document.getElementById(\"type\");\r\n    if (category !== \"\" && difficulty !== \"\") {\r\n      typeBox.disabled = true;\r\n    }\r\n\r\n    setCategory(category);\r\n\r\n    setDifficulty(difficulty);\r\n\r\n    setType(type);\r\n  };\r\n\r\n  const checkInfo = (e) => {\r\n    e.preventDefault();\r\n\r\n    let categoryid = document.getElementById(\"category\");\r\n    let categoryTxt = categoryid.options[categoryid.selectedIndex].text;\r\n\r\n    //update parent state\r\n    props.length(length);\r\n\r\n    props.difficulty(difficulty);\r\n    props.type(type);\r\n    props.category(category);\r\n\r\n    props.categoryText(categoryTxt);\r\n\r\n    props.onClick();\r\n    history.push(\"/startQuizz\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-component\">\r\n      <form onSubmit={checkInfo} onInput={inputValue} onChange={checkSelects}>\r\n        <label htmlFor=\"length\" className=\"length\">\r\n          <p>Question Length</p>\r\n          <output id=\"output\" name=\"questionLength\" htmlFor=\"length\">\r\n            {length}\r\n          </output>\r\n          <input id=\"length\" type=\"range\" min=\"10\" max=\"20\" step=\"0.1\" />\r\n        </label>\r\n        <label htmlFor=\"category\" className=\"select\">\r\n          <p>Select Category</p>\r\n          <select name=\"category\" id=\"category\">\r\n            <option value=\"\">Any Category</option>\r\n            <option value=\"9\">General Knowledge</option>\r\n            <option value=\"10\">Entertainment: Books</option>\r\n            <option value=\"11\">Entertainment: Film</option>\r\n            <option value=\"12\">Entertainment: Music</option>\r\n            <option value=\"13\">Entertainment: Musicals & Theatres</option>\r\n            <option value=\"14\">Entertainment: Television</option>\r\n            <option value=\"15\">Entertainment: Video Games</option>\r\n            <option value=\"16\">Entertainment: Board Games</option>\r\n            <option value=\"17\">Science & Nature </option>\r\n            <option value=\"18\">Science: Computers</option>\r\n            <option value=\"19\">Science: Mathematicse</option>\r\n            <option value=\"20\">Mythology</option>\r\n            <option value=\"21\">Sports</option>\r\n            <option value=\"22\">Geography</option>\r\n            <option value=\"23\">History</option>\r\n            <option value=\"24\">Politics</option>\r\n            <option value=\"25\">Art</option>\r\n            <option value=\"26\">Celebrities</option>\r\n            <option value=\"27\">Animals</option>\r\n            <option value=\"28\">Vehicles</option>\r\n            <option value=\"29\">Entertainment: Comics</option>\r\n            <option value=\"30\">Science: Gadgets</option>\r\n            <option value=\"31\">Entertainment: Japanese Anime & Manga</option>\r\n            <option value=\"32\">Entertainment: Cartoon & Animations</option>\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"category\">\r\n          <p>Select Difficulty</p>\r\n\r\n          <select name=\"category\" id=\"difficulty\">\r\n            <option value=\"\">Any Difficulty</option>\r\n            <option value=\"easy\">Easy</option>\r\n            <option value=\"medium\">Medium</option>\r\n            <option value=\"hard\">Hard</option>\r\n          </select>\r\n        </label>\r\n        <label htmlFor=\"category\">\r\n          <p>Select Type</p>\r\n\r\n          <select name=\"category\" id=\"type\">\r\n            <option value=\"\">Any Type</option>\r\n            <option value=\"multiple\">Multiple Choice</option>\r\n            <option value=\"boolean\">True / False</option>\r\n          </select>\r\n        </label>\r\n        <button>Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport \"../style/Questions.css\";\r\n\r\nexport default function Questions(props) {\r\n  let data = props.data;\r\n  let text = props.categoryTxt;\r\n\r\n  const [score, setScore] = useState(0);\r\n  const [questions, setQuestions] = useState();\r\n  const [answers, setAnswers] = useState([]);\r\n  const [correctAnswers, setCorrectAnswers] = useState(0);\r\n  const [finished, setFinished] = useState(false);\r\n  const [counter, setCount] = useState(1);\r\n\r\n  const previousData = useRef();\r\n  previousData.current = score;\r\n\r\n  let back = useHistory();\r\n\r\n  let allAnswers = [];\r\n\r\n  //shuffle array\r\n  const shuffle = (array) => {\r\n    let currentIndex = array.length,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n\r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [\r\n        array[randomIndex],\r\n        array[currentIndex],\r\n      ];\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  const quizData = () => {\r\n    //get question\r\n    setQuestions(data[score].question);\r\n    //empty array on every question and fill it again\r\n    allAnswers = [];\r\n    allAnswers.push(data[score].correct_answer);\r\n    data[score].incorrect_answers.map((item) => {\r\n      return allAnswers.push(item);\r\n    });\r\n    //push all answers together\r\n    //shuffle them\r\n\r\n    shuffle(allAnswers);\r\n    setAnswers(null);\r\n    setAnswers(allAnswers);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!data) {\r\n      data = props.data;\r\n    }\r\n    if (data) {\r\n      if (data[score].question !== questions) {\r\n        quizData();\r\n      }\r\n\r\n      if (score !== previousData.current) {\r\n        setScore(previousData.score);\r\n      }\r\n\r\n      if (props.categoryTxt !== text) {\r\n        text = props.categoryText;\r\n      }\r\n      if (score <= props.length) {\r\n        checkLimit();\r\n      }\r\n    }\r\n  }, [data, score, questions, quizData, text]);\r\n\r\n  const checkAnswer = (e) => {\r\n    if (e.target.value === data[score].correct_answer) {\r\n      setCorrectAnswers(correctAnswers + 1);\r\n    }\r\n  };\r\n\r\n  const checkLimit = () => {\r\n    if (counter === props.length) {\r\n      setFinished(true);\r\n    }\r\n  };\r\n\r\n  const nextQuestion = (e) => {\r\n    e.preventDefault();\r\n    setCount(counter + 1);\r\n    setScore(score + 1);\r\n    quizData();\r\n  };\r\n\r\n  const backToMain = () => {\r\n    back.push(\"/\");\r\n  };\r\n  return (\r\n    <div className=\"questions\">\r\n      {finished === false ? (\r\n        <form onSubmit={nextQuestion} onClick={checkAnswer}>\r\n          <h1>Quizz</h1>\r\n          <div className=\"score\">\r\n            <p>\r\n              Question: {counter}/{props.length}\r\n            </p>\r\n            <p>Correct Answers: {correctAnswers}</p>\r\n          </div>\r\n          <div className=\"chosenOptions\">\r\n            <div>\r\n              <p>Length:</p>\r\n              <p>{props.length}</p>\r\n            </div>\r\n            <div>\r\n              <p>Difficulty:</p>\r\n              <p>\r\n                {props.difficulty === \"\" ? \"Any Difficulty\" : props.difficulty}\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <p>Type:</p>\r\n              <p>{props.type === \"\" ? \"Any Type\" : props.type}</p>\r\n            </div>\r\n            <div>\r\n              <p>Category:</p>\r\n              <p>{props.category === \"\" ? \"Any Category\" : text}</p>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <div className=\"question\">\r\n            <p>{questions}</p>\r\n          </div>\r\n          {!data ? (\r\n            \"loading..\"\r\n          ) : data[score].type !== \"multiple\" ? (\r\n            <div className=\"answers\">\r\n              <button onClick={checkAnswer} value={answers[0]}>\r\n                {answers[0]}\r\n              </button>\r\n              <button onClick={checkAnswer} value={answers[1]}>\r\n                {answers[1]}\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"answers\">\r\n              <button onClick={checkAnswer} value={answers[0]}>\r\n                {answers[0]}\r\n              </button>\r\n              <button onClick={checkAnswer} value={answers[1]}>\r\n                {answers[1]}\r\n              </button>\r\n              <button onClick={checkAnswer} value={answers[2]}>\r\n                {answers[2]}\r\n              </button>\r\n              <button onClick={checkAnswer} value={answers[3]}>\r\n                {answers[3]}\r\n              </button>\r\n            </div>\r\n          )}\r\n        </form>\r\n      ) : (\r\n        <div className=\"finished\">\r\n          <h3>\r\n            Congrats your score is {correctAnswers}/{props.length}\r\n          </h3>\r\n          <button onClick={backToMain}>Try Again</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport MainComponent from \"./Components/MainComponent\";\nimport Questions from \"./Components/Questions\";\nimport \"./App.css\";\n\nfunction App() {\n  const [data, setData] = useState(null);\n  const [length, setLength] = useState(20);\n  const [type, setType] = useState(\"\");\n  const [difficulty, setDifficulty] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [categoryText, setCategoryText] = useState(\"\");\n  const previousData = useRef();\n\n  const fetchData = () => {\n    fetch(\n      `https://opentdb.com/api.php?amount=${length}&category=${category}&difficulty=${difficulty}&type=${type}`\n    )\n      .then((res) => res.json())\n      .then((fetchedData) => {\n        setData(fetchedData.results);\n        //if state doesn't update force it\n        previousData.current = fetchedData.results;\n      });\n  };\n  //forcing data to update continues here\n  useEffect(() => {\n    if (previousData.current !== data) {\n      setData(previousData.current);\n    }\n  }, [data]);\n\n  return (\n    <div>\n      <Router>\n        <Route exact path=\"/\">\n          <MainComponent\n            onClick={fetchData}\n            length={setLength}\n            type={setType}\n            difficulty={setDifficulty}\n            category={setCategory}\n            categoryText={setCategoryText}\n          />\n        </Route>\n        <Route path=\"/startQuizz\">\n          <Questions\n            length={length}\n            type={type}\n            difficulty={difficulty}\n            category={category}\n            data={data}\n            categoryTxt={categoryText}\n          />\n        </Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}